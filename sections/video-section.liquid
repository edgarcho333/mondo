{{ 'video-section.css' | asset_url | stylesheet_tag }}

{% style %}
.video-player {
  object-fit: cover;
  width: 100%;
  height: 100%;
}
{% endstyle %}

<div class="video-gallery-section" data-video-section>
  <h2 class="video-gallery-title">{{ section.settings.title }}</h2>
  
  <div class="video-gallery-grid">
    {% for block in section.blocks %}
      {% if block.type == 'video' %}
        <div class="video-item" {{ block.shopify_attributes }}>
          <div class="video-container">
            <video 
              class="video-player"
              autoplay
              muted
              loop
              playsinline
              defaultMuted
              webkit-playsinline
              x5-playsinline
              preload="auto"
              data-autoplay
            >
              <source src="{{ block.settings.video.sources[0].url }}" type="video/mp4">
            </video>
          </div>
          {% if block.settings.subtitle %}
            <p class="video-subtitle">{{ block.settings.subtitle }}</p>
          {% endif %}
          {% if block.settings.button_url != blank %}
            <a href="{{ block.settings.button_url }}" 
               class="video-button"
               style="background-color: {{ block.settings.button_color }}">
              {{ block.settings.button_text | default: 'Watch Now' }}
            </a>
          {% endif %}
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<script type="text/javascript">
  class VideoController {
    constructor() {
      this.init();
    }

    init() {
      this.videos = document.querySelectorAll('video[data-autoplay]');
      this.setupVideos();
      this.setupIntersectionObserver();
      this.handleVisibilityChange();
    }

    setupVideos() {
      this.videos.forEach(video => {
        // Force video loading
        video.load();
        
        // Multiple play attempts
        this.attemptPlay(video);
        
        // Add event listeners
        video.addEventListener('loadedmetadata', () => this.attemptPlay(video));
        video.addEventListener('loadeddata', () => this.attemptPlay(video));
        video.addEventListener('canplay', () => this.attemptPlay(video));
        
        // Ensure muted state
        video.muted = true;
      });
    }

    attemptPlay(video) {
      const playPromise = video.play();
      if (playPromise !== undefined) {
        playPromise.catch(error => {
          // If autoplay fails, try again after a short delay
          setTimeout(() => {
            video.muted = true; // Ensure muted
            video.play().catch(() => {}); // Try again
          }, 100);
        });
      }
    }

    setupIntersectionObserver() {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const video = entry.target;
          if (entry.isIntersecting) {
            this.attemptPlay(video);
          } else {
            video.pause();
          }
        });
      }, options);

      this.videos.forEach(video => observer.observe(video));
    }

    handleVisibilityChange() {
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
          this.videos.forEach(video => this.attemptPlay(video));
        }
      });
    }
  }

  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    new VideoController();
  });

  // Initialize on page load
  window.addEventListener('load', () => {
    new VideoController();
  });

  // Initialize when Shopify section loads
  document.addEventListener('shopify:section:load', () => {
    new VideoController();
  });
</script>

{% schema %}
{
  "name": "Video Section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Watch More About Mondo"
    }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Video",
      "limit": 4,
      "settings": [
        {
          "type": "video",
          "id": "video",
          "label": "Upload Video"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Video Subtitle"
        },
        {
          "type": "url",
          "id": "button_url",
          "label": "Button URL"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Watch Now"
        },
        {
          "type": "color",
          "id": "button_color",
          "label": "Button Color",
          "default": "#000000"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Gallery",
      "blocks": [
        {
          "type": "video"
        },
        {
          "type": "video"
        },
        {
          "type": "video"
        },
        {
          "type": "video"
        }
      ]
    }
  ]
}
{% endschema %}